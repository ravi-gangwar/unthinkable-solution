RECIPE APP API DOCUMENTATION
=============================

Base URL: http://localhost:3000/api/v1

=================
1. AUTHENTICATION
=================

POST /auth/signup
-----------------
Description: Register a new user
Request Body:
{
  "name": "John Doe",
  "email": "john@example.com",
  "password": "password123"
}

Response (Success - 200):
{
  "success": true,
  "data": {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "created_at": "2024-01-01T00:00:00.000Z"
  },
  "message": "User created successfully"
}

Response (Error - 409):
{
  "success": false,
  "message": "Email already exists"
}

POST /auth/login
----------------
Description: Login user
Request Body:
{
  "email": "john@example.com",
  "password": "password123"
}

Response (Success - 200):
{
  "success": true,
  "data": {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "created_at": "2024-01-01T00:00:00.000Z"
  },
  "message": "Login successful"
}

Response (Error - 401):
{
  "success": false,
  "message": "Invalid email or password"
}

GET /auth/users/:userId
-----------------------
Description: Get user profile
Response (Success - 200):
{
  "success": true,
  "data": {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "created_at": "2024-01-01T00:00:00.000Z"
  }
}

=================
2. INGREDIENTS
=================

GET /users/ingredients
----------------------
Description: Get all available ingredients categorized for user selection
Response (Success - 200):
{
  "success": true,
  "data": {
    "protein": [
      {"id": 1, "name": "chicken breast"},
      {"id": 2, "name": "ground beef"},
      {"id": 3, "name": "salmon"},
      {"id": 4, "name": "eggs"},
      {"id": 5, "name": "tofu"}
    ],
    "vegetable": [
      {"id": 6, "name": "onion"},
      {"id": 7, "name": "garlic"},
      {"id": 8, "name": "tomato"},
      {"id": 9, "name": "bell pepper"},
      {"id": 10, "name": "carrot"}
    ],
    "grain": [
      {"id": 11, "name": "rice"},
      {"id": 12, "name": "pasta"},
      {"id": 13, "name": "bread"},
      {"id": 14, "name": "quinoa"}
    ],
    "dairy": [
      {"id": 15, "name": "milk"},
      {"id": 16, "name": "cheese"},
      {"id": 17, "name": "butter"}
    ],
    "pantry": [
      {"id": 18, "name": "olive oil"},
      {"id": 19, "name": "salt"},
      {"id": 20, "name": "pepper"},
      {"id": 21, "name": "soy sauce"}
    ],
    "herb": [
      {"id": 22, "name": "basil"},
      {"id": 23, "name": "oregano"},
      {"id": 24, "name": "thyme"}
    ]
  }
}

=================
3. RECIPES
=================

GET /recipes
------------
Description: Get all recipes with optional filters
Query Parameters:
- search: string (optional) - search in name, description, ingredients
- difficulty: string (optional) - "easy", "medium", "hard"
- maxCookingTime: number (optional) - maximum cooking time in minutes
- cuisineType: string (optional) - e.g., "Italian", "Asian", "American"
- dietaryTags: string (optional) - e.g., "vegetarian", "vegan", "gluten-free"
- page: number (optional, default: 1)
- limit: number (optional, default: 20)

Example: GET /recipes?search=chicken&difficulty=easy&maxCookingTime=30

Response (Success - 200):
{
  "success": true,
  "data": [
    {
      "id": 1,
      "name": "Chicken Fried Rice",
      "description": "Quick and delicious fried rice with chicken",
      "ingredients": "chicken breast, rice, eggs, onion, garlic, soy sauce, oil",
      "instructions": "1. Cook rice. 2. Cook chicken. 3. Scramble eggs. 4. Stir-fry everything together.",
      "difficulty": "easy",
      "cooking_time": 25,
      "cuisine_type": "Asian",
      "dietary_tags": "",
      "image_url": null,
      "created_at": "2024-01-01T00:00:00.000Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 1
  }
}

GET /recipes/:recipeId
----------------------
Description: Get single recipe details
Response (Success - 200):
{
  "success": true,
  "data": {
    "id": 1,
    "name": "Chicken Fried Rice",
    "description": "Quick and delicious fried rice with chicken",
    "ingredients": "chicken breast, rice, eggs, onion, garlic, soy sauce, oil",
    "instructions": "1. Cook rice. 2. Cook chicken. 3. Scramble eggs. 4. Stir-fry everything together.",
    "difficulty": "easy",
    "cooking_time": 25,
    "cuisine_type": "Asian",
    "dietary_tags": "",
    "image_url": null,
    "created_at": "2024-01-01T00:00:00.000Z"
  }
}

POST /recipes/suggestions
-------------------------
Description: Get recipe suggestions based on available ingredients and preferences
Request Body:
{
  "ingredients": [1, 6, 7, 11, 18],  // Array of ingredient IDs
  "dietaryRestrictions": ["vegetarian"],  // Array of dietary restrictions (optional)
  "maxCookingTime": 30,  // Maximum cooking time in minutes (optional)
  "difficulty": "easy",  // Difficulty level (optional)
  "servingSize": 4  // Desired serving size (optional)
}

Response (Success - 200):
{
  "success": true,
  "data": [
    {
      "id": 2,
      "name": "Pasta with Tomato Sauce",
      "description": "Simple pasta with fresh tomato sauce",
      "ingredients": "pasta, tomatoes, garlic, onion, olive oil, basil",
      "instructions": "1. Cook pasta. 2. Make tomato sauce. 3. Combine and serve.",
      "difficulty": "easy",
      "cooking_time": 20,
      "cuisine_type": "Italian",
      "dietary_tags": "vegetarian",
      "image_url": null,
      "created_at": "2024-01-01T00:00:00.000Z",
      "matching_ingredients_count": 3,
      "total_ingredients_count": 6,
      "match_percentage": 50,
      "adjusted_serving_size": 4
    }
  ],
  "message": "Found 1 recipe suggestions"
}

GET /recipes/data/cuisine-types
-------------------------------
Description: Get all available cuisine types
Response (Success - 200):
{
  "success": true,
  "data": ["American", "Asian", "British", "Greek", "Indian", "Italian", "Mexican"]
}

GET /recipes/data/dietary-tags
------------------------------
Description: Get all available dietary tags
Response (Success - 200):
{
  "success": true,
  "data": ["gluten-free", "vegan", "vegetarian"]
}

=================
4. USER FAVORITES
=================

GET /users/:userId/favorites
----------------------------
Description: Get user's favorite recipes
Response (Success - 200):
{
  "success": true,
  "data": [
    {
      "id": 1,
      "name": "Chicken Fried Rice",
      "description": "Quick and delicious fried rice with chicken",
      "ingredients": "chicken breast, rice, eggs, onion, garlic, soy sauce, oil",
      "instructions": "1. Cook rice. 2. Cook chicken. 3. Scramble eggs. 4. Stir-fry everything together.",
      "difficulty": "easy",
      "cooking_time": 25,
      "cuisine_type": "Asian",
      "dietary_tags": "",
      "image_url": null,
      "created_at": "2024-01-01T00:00:00.000Z",
      "favorited_at": "2024-01-02T00:00:00.000Z"
    }
  ]
}

POST /users/:userId/favorites/:recipeId
---------------------------------------
Description: Add recipe to user's favorites
Response (Success - 200):
{
  "success": true,
  "message": "Recipe added to favorites"
}

DELETE /users/:userId/favorites/:recipeId
-----------------------------------------
Description: Remove recipe from user's favorites
Response (Success - 200):
{
  "success": true,
  "message": "Recipe removed from favorites"
}

=================
5. UTILITY
=================

GET /health
-----------
Description: Health check endpoint
Response (Success - 200):
{
  "success": true,
  "message": "Recipe API is running",
  "timestamp": "2024-01-01T00:00:00.000Z"
}

=================
FRONTEND FLOW
=================

1. User Registration/Login:
   - Use /auth/signup and /auth/login
   - Store user data (especially user ID) for subsequent requests

2. Ingredient Selection:
   - Fetch available ingredients with /users/ingredients
   - Display categorized ingredients for user selection
   - Allow multiple ingredient selection and dietary preferences

3. Recipe Suggestions:
   - Send selected ingredient IDs and preferences to /recipes/suggestions
   - Display recipes with match percentage
   - Show cooking time, difficulty, and dietary tags

4. Recipe Search & Filtering:
   - Use /recipes with query parameters for advanced search
   - Implement filters for difficulty, cooking time, cuisine type, dietary tags

5. Recipe Details:
   - Use /recipes/:id to show full recipe details
   - Display ingredients list, step-by-step instructions

6. Favorites Management:
   - Add/remove favorites with POST/DELETE /users/:userId/favorites/:recipeId
   - Display user's favorite recipes with /users/:userId/favorites

7. Additional Features:
   - Use /recipes/data/cuisine-types and /recipes/data/dietary-tags for dropdown options
   - Implement recipe cards with cooking time, difficulty indicators
   - Add serving size adjustment based on user preference

=================
ERROR HANDLING
=================

All endpoints return consistent error format:
{
  "success": false,
  "message": "Error description"
}

Common HTTP Status Codes:
- 200: Success
- 400: Bad Request (missing required fields)
- 401: Unauthorized (invalid login)
- 404: Not Found (recipe/user not found)
- 409: Conflict (email already exists)
- 500: Internal Server Error
